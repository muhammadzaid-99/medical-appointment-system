DATABASE FORMAT

Users Table:
    user_id 	PRIMARY, SERIAL, AUTOMATIC
    name    	64 CHARACTERS MAX
    email 	    255 CHARACTERS MAX
    password 	128 CHARACTERS MAX

Doctors Table:
    *doctor_id 	PRIMARY, LINKED TO user_id IN "Users"
    department 	32 CHARACTERS MAX
    address 	32 CHARACTERS MAX
    fee 	


Schedule Table:
    schedule_id 	SERIAL, PRIMARY, AUTOMATIC
    *doctor_id 		LINKED TO doctor_id IN "Doctors"
    allowed_patients 	
    appointed_patients 
    start_time 		DATE, TIME WITH TIMEZONE '2004-10-19 10:23:54+02'
    end_time 		..


Patients Table:
    patient_id 		SERIAL, PRIMARY, AUTOMATIC
    *user_id     	LINKED TO user_id IN "Users"
    *schedule_id 	LINKED TO schedule_id IN "Schedule"
    patient_name 	64 CHARACTERS MAX
    age 		    
    gender 		    'M', 'F' or 'O'
    appointment_date 	FORMAT 1999-01-08
    turn   

Posts Table:
    post_id         SERIAL, PRIMARY, AUTOMATIC
    date_time       ..
    upvotes         INT
    downvotes       INT


Questions Table:
    question_id         PRIMARY, REFERENCES Posts(post_id),
    user_id             REFERENCES Users(user_id),
    question            TEXT
    answers_count       INT

Answers Table:
    answer_id           PRIMARY, REFERENCES Posts(post_id),
    question_id         REFERENCES Questions(question_id),
    doctor_id           REFERENCES Doctors(doctor_id),
    answer              TEXT 

Votes Table:
    vote_id         SERIAL, PRIMARY, AUTOMATIC
    post_id         REFERENCES Posts(post_id),
    voter_id        REFERENCES Users(user_id),
    vote_type       'U' or 'D' | U: upvote, D: downvote


------ All Requests and Responses are in JSON Format

API ('/api/auth/signup'):
POST	- requires name, email, password and isDoctor = false in case of regular user
	    - requires name, email, password, department, address, fee and isDoctor = true in case of doctor

API ('/api/auth/login'):
GET	    will return message and loggedIn (true or false)
POST	requires email, password
	

API ('/api/auth/logout'):
GET 	logs out user

API ('/api/user/profile'):
GET 	sends user name, email (and also department, address, fee in case of doctor)
PUT     to update profile, requires name, password (optional) and department, address, fee (for doctor)

API ('/api/user/schedule'): This route is only for doctor, for regular user it will send message of Invalid Request.
GET	    sends an array of schedules of logged in doctor containing schedule_id, allowed_patients, appointed_patients, start_time, end_time
POST	requires allowed_patients, start_time, end_time in format specified
PUT     to update existing schedule, requires schedule_id, allowed_patients, patients will be rescheduled automatically, past schedules cannot be modifies
DELETE  delete schedule or time_slot, requires schedule_id, patients will be rescheduled automatically, past schedules cannot be deleted

API ('/api/user/appointments'): Only Patient can POST, DELETE on this route.
GET	    - for doctor, sends isDoctor=true and an array of all appointments containing start_time, end_time, patient_name, age, gender, appointment_date
	    - for user, sends isDoctor=false and two objects appointments and available_slots
	    - appointments contain array of appointments containing patient_id, start_time, end_time, doctor_name, department, address, fee,
        patient_name, age, gender, appointment_date, turn, start_interval, end_interval
	    - available_slots contain array of appointments containing of start_time, end_time, doctor_name, schedule_id, address, fee, department

!!!!    >>> Thinking of moving available_slots in /schedule route <<<

POST	requires schedule_id (can be obtained from GET appointments), patient_name, age, gender
DELETE  deletes appointment, requires patient_id (can be obtained from GET appointments)


### ---------- FORUM SECTION ---------- ###

>> API ('/api/posts/:page'):
	'page' is a variable where page number is provided as all posts cannot be displayed on a single page
GET     get all posts (on that page number) (Q/A)=> format example:
        [
            {
                "date_time": "2023-09-03T00:00:00.000Z",
                "upvotes": 0,
                "downvotes": 0,
                "question": "What is oxygenated blood?",
                "answers_count": 2,
                "question_id": "5",
                "name": "Qasim",
                "my_post": true,
                "answers": [
                    {
                        "date_time": "2023-09-03T00:00:00.000Z",
                        "upvotes": 0,
                        "downvotes": 0,
                        "answer": "Oxygenated blood is blood that has a high concentration of oxygen, typically found in arteries.",
                        "answer_id": "6",
                        "question_id": 5,
                        "name": "Shehzad",
                        "my_post": false
                    },
                    {
                        "date_time": "2023-09-03T00:00:00.000Z",
                        "upvotes": 0,
                        "downvotes": 0,
                        "answer": "It is pumped from the heart to supply oxygen to body tissues and organs.",
                        "answer_id": "7",
                        "question_id": 5,
                        "name": "Shehzad",
                        "my_post": false
                    }
                ]
            }
        ]


DELETE  requries question_id OR answer_id. Deleting question automatically deletes votes and its answers with votes.
        A user/doctor can only delete their posts. my_post tells whether it is user's (logged in user) post or not.


>> Route('/api/posts/question'): 
POST    Posts a question. Requries 'question'

>> Route('/api/posts/answer'): 
POST    Posts an answer to a question. Only doctor can. Requries 'answer' and 'question_id'

>> Route('/api/posts/vote'): 
POST    Posts vote (upvote or downvote) to a post. Requires ['question_id' or 'answer_id'] AS 'post_id' and 'vote_type' ('U' or 'D')
DELETE  Deletes vote (upvote or downvote) to a post. Requires ['question_id' or 'answer_id'] AS 'post_id'


...
